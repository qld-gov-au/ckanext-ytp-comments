---
name: Publish to pypi
on:
  push:
  #On versioned releases
    tags:
      - '*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      force:
        type: choice
        description: Retry Publish Version
        options:
          - No
          - Yes
      environment:
        description: 'Deployment environment'
        required: true
        default: 'pypi'
        type: choice
        options:
          - pypi
          - testpypi
      dryRun:
        description: 'Dry Run deployment (set to false to deploy)'
        required: true
        type: boolean
        default: true



jobs:
  lint:
    if: github.repository == 'qld-gov-au/ckanext-ytp-comments'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install requirements
        run: pip install flake8 pycodestyle
      - name: Check syntax
        run: flake8


  test:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        ckan-version: [ "2.11", "2.10", 2.9 ]
        experimental: [ false ]
        include:
          - ckan-version: 'master'
            experimental: true  #master is unstable, good to know if we are compatible or not

    name: Test on CKAN ${{ matrix.ckan-version }}
    runs-on: ubuntu-latest
    container: drevops/ci-runner:23.12.0
    env:
      CKAN_VERSION: ${{ matrix.ckan-version }}

    steps:
      # Patch https://github.com/actions/runner/issues/863
      - name: Preserve $HOME set in the container
        run: echo HOME=/root >> "$GITHUB_ENV"

      - uses: actions/checkout@v4
        continue-on-error: ${{ matrix.experimental }}
        timeout-minutes: 2

      - name: Build
        continue-on-error: ${{ matrix.experimental }}
        run: bin/build.sh
        timeout-minutes: 15

      - name: Lint
        continue-on-error: ${{ matrix.experimental }}
        run: ahoy lint
        timeout-minutes: 2

      - name: Unit test
        continue-on-error: ${{ matrix.experimental }}
        run: ahoy test-unit
        timeout-minutes: 5

      - name: Scenario test
        continue-on-error: ${{ matrix.experimental }}
        run: |
          ahoy install-site
          ahoy test-bdd
        timeout-minutes: 20

      - name: Retrieve logs
        if: always()
        run: ahoy logs
        continue-on-error: ${{ matrix.experimental }}
        timeout-minutes: 1

      - name: Retrieve results
        if: always()
        run: bin/process-artifacts.sh
        continue-on-error: ${{ matrix.experimental }}
        timeout-minutes: 1

      - name: Test Summary
        uses: test-summary/action@v2
        continue-on-error: ${{ matrix.experimental }}
        with:
          paths: "/tmp/artifacts/junit/*.xml"
        if: always()

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        continue-on-error: ${{ matrix.experimental }}
        with:
          name: CKAN ${{ matrix.ckan-version }} screenshots
          path: /tmp/artifacts/behave/screenshots
        timeout-minutes: 1

  publishSkipped:
    if: github.repository != 'qld-gov-au/ckanext-ytp-comments'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "## Skipping PyPI publish on downstream repository" >> $GITHUB_STEP_SUMMARY

  publish:
    needs: test
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    name: Publish Package
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'pypi' }}
      url: ${{ steps.version.outputs.url }}
    concurrency:
      group: ${{ github.event.inputs.environment }}-deployment
      cancel-in-progress: false
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'pypi' }}
    steps:
      - name: Get Git Tag and set url from environment
        id: version
        run: |
          #!/bin/bash

          TAG_VALUE=${GITHUB_REF/refs\/tags\//}
          echo "version=${TAG_VALUE}" >> $GITHUB_OUTPUT

          # Extract the repository name (minus the owner/org)
          reponame=$(basename $GITHUB_REPOSITORY)
          echo "reponame=${reponame}" >> $GITHUB_OUTPUT

          if [ "$env.ENVIRONMENT" == "testpypi" ]; then
            url="https://test.pypi.org/project/$reponame/$TAG_VALUE/"
            echo "environment=${env.ENVIRONMENT}" >> $GITHUB_OUTPUT
          else
            url="https://pypi.org/project/$reponame/$TAG_VALUE/"
            echo "environment=pypi" >> $GITHUB_OUTPUT
          fi

          echo "url=${url}" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate tag version
        if: ${{ startsWith(github.ref, 'refs/tags') }}
        run: |
          PYTHON_VERSION=$(grep -E "\bversion='[^']+'" setup.py | awk -F "'" '{print $2}')
          echo "Tag version is [${{ steps.version.outputs.version }}], Python version is [$PYTHON_VERSION]"
          if [ "${{ steps.version.outputs.version }}" != "$PYTHON_VERSION" ]; then
            echo "Version mismatch; tag version is [${{ steps.version.outputs.version }}] but Python version is [$PYTHON_VERSION]" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Build package ${{ steps.version.outputs.reponame }} @ ${{ steps.version.outputs.version }}
        run: |
          pip install build
          pip install twine
          python -m build
      - name: Publish package distributions to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags') && steps.version.outputs.environment == 'pypi' && github.event.inputs.dryRun != 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          skip-existing: true
#          verbose: true
#          print-hash: true
      - name: Test Publish package distributions to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags') && steps.version.outputs.environment == 'testpypi' && github.event.inputs.dryRun == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
#          skip-existing: true
#          verbose: true
#          print-hash: true
      - name: Summary output
        if: ${{ startsWith(github.ref, 'refs/tags') && github.event.inputs.dryRun != 'true' }}
        run:
          echo "Published ${{ steps.version.outputs.repo_name }} @ ${{ steps.version.outputs.version }} to ${{ steps.version.outputs.url }}" >> $GITHUB_STEP_SUMMARY

      - name: (TEST RUN) Test Publish package distributions to PyPI
        if: ${{ github.event.inputs.dryRun == 'true' }}
        run:
          echo "Dry run deployment, did not publish" >> $GITHUB_STEP_SUMMARY
